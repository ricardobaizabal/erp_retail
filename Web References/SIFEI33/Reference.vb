'------------------------------------------------------------------------------
' <auto-generated>
'     Este código fue generado por una herramienta.
'     Versión de runtime:4.0.30319.42000
'
'     Los cambios en este archivo podrían causar un comportamiento incorrecto y se perderán si
'     se vuelve a generar el código.
' </auto-generated>
'------------------------------------------------------------------------------

Option Strict Off
Option Explicit On

Imports System
Imports System.ComponentModel
Imports System.Diagnostics
Imports System.Web.Services
Imports System.Web.Services.Protocols
Imports System.Xml.Serialization

'
'Microsoft.VSDesigner generó automáticamente este código fuente, versión=4.0.30319.42000.
'
Namespace SIFEI33
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code"),  _
     System.Web.Services.WebServiceBindingAttribute(Name:="SIFEIPortBinding", [Namespace]:="http://MApeados/")>  _
    Partial Public Class SIFEIService
        Inherits System.Web.Services.Protocols.SoapHttpClientProtocol
        
        Private cancelaCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelaCFDISectorPrimarioOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getXMLProcesoOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDIAndURLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private CambiaPasswordOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDISendPDFOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDIProcesaOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getCFDISignOperationCompleted As System.Threading.SendOrPostCallback
        
        Private setCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getTimbreCFDIOperationCompleted As System.Threading.SendOrPostCallback
        
        Private cancelaCFDISignatureOperationCompleted As System.Threading.SendOrPostCallback
        
        Private getXMLOperationCompleted As System.Threading.SendOrPostCallback
        
        Private useDefaultCredentialsSetExplicitly As Boolean
        
        '''<remarks/>
        Public Sub New()
            MyBase.New
            Me.Url = Global.LinkiumCFDI.My.MySettings.Default.LinkiumCFDI_SIFEI33_SIFEIService
            If (Me.IsLocalFileSystemWebService(Me.Url) = true) Then
                Me.UseDefaultCredentials = true
                Me.useDefaultCredentialsSetExplicitly = false
            Else
                Me.useDefaultCredentialsSetExplicitly = true
            End If
        End Sub
        
        Public Shadows Property Url() As String
            Get
                Return MyBase.Url
            End Get
            Set
                If (((Me.IsLocalFileSystemWebService(MyBase.Url) = true)  _
                            AndAlso (Me.useDefaultCredentialsSetExplicitly = false))  _
                            AndAlso (Me.IsLocalFileSystemWebService(value) = false)) Then
                    MyBase.UseDefaultCredentials = false
                End If
                MyBase.Url = value
            End Set
        End Property
        
        Public Shadows Property UseDefaultCredentials() As Boolean
            Get
                Return MyBase.UseDefaultCredentials
            End Get
            Set
                MyBase.UseDefaultCredentials = value
                Me.useDefaultCredentialsSetExplicitly = true
            End Set
        End Property
        
        '''<remarks/>
        Public Event cancelaCFDICompleted As cancelaCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event cancelaCFDISectorPrimarioCompleted As cancelaCFDISectorPrimarioCompletedEventHandler
        
        '''<remarks/>
        Public Event getXMLProcesoCompleted As getXMLProcesoCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDIAndURLCompleted As getCFDIAndURLCompletedEventHandler
        
        '''<remarks/>
        Public Event CambiaPasswordCompleted As CambiaPasswordCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDICompleted As getCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDISendPDFCompleted As getCFDISendPDFCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDIProcesaCompleted As getCFDIProcesaCompletedEventHandler
        
        '''<remarks/>
        Public Event getCFDISignCompleted As getCFDISignCompletedEventHandler
        
        '''<remarks/>
        Public Event setCFDICompleted As setCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event getTimbreCFDICompleted As getTimbreCFDICompletedEventHandler
        
        '''<remarks/>
        Public Event cancelaCFDISignatureCompleted As cancelaCFDISignatureCompletedEventHandler
        
        '''<remarks/>
        Public Event getXMLCompleted As getXMLCompletedEventHandler
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelaCFDI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuarioSIFEI As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal passUser As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal rfc As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal pfx() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal passPFX As String, <System.Xml.Serialization.XmlElementAttribute("UUIDS", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal UUIDS() As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("cancelaCFDI", New Object() {usuarioSIFEI, passUser, rfc, pfx, passPFX, UUIDS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDIAsync(ByVal usuarioSIFEI As String, ByVal passUser As String, ByVal rfc As String, ByVal pfx() As Byte, ByVal passPFX As String, ByVal UUIDS() As String)
            Me.cancelaCFDIAsync(usuarioSIFEI, passUser, rfc, pfx, passPFX, UUIDS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDIAsync(ByVal usuarioSIFEI As String, ByVal passUser As String, ByVal rfc As String, ByVal pfx() As Byte, ByVal passPFX As String, ByVal UUIDS() As String, ByVal userState As Object)
            If (Me.cancelaCFDIOperationCompleted Is Nothing) Then
                Me.cancelaCFDIOperationCompleted = AddressOf Me.OncancelaCFDIOperationCompleted
            End If
            Me.InvokeAsync("cancelaCFDI", New Object() {usuarioSIFEI, passUser, rfc, pfx, passPFX, UUIDS}, Me.cancelaCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelaCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelaCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelaCFDICompleted(Me, New cancelaCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelaCFDISectorPrimario(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuarioSIFEI As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal passUser As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal rfc As String, <System.Xml.Serialization.XmlElementAttribute("UUIDS", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> ByVal UUIDS() As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("cancelaCFDISectorPrimario", New Object() {usuarioSIFEI, passUser, rfc, UUIDS})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDISectorPrimarioAsync(ByVal usuarioSIFEI As String, ByVal passUser As String, ByVal rfc As String, ByVal UUIDS() As String)
            Me.cancelaCFDISectorPrimarioAsync(usuarioSIFEI, passUser, rfc, UUIDS, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDISectorPrimarioAsync(ByVal usuarioSIFEI As String, ByVal passUser As String, ByVal rfc As String, ByVal UUIDS() As String, ByVal userState As Object)
            If (Me.cancelaCFDISectorPrimarioOperationCompleted Is Nothing) Then
                Me.cancelaCFDISectorPrimarioOperationCompleted = AddressOf Me.OncancelaCFDISectorPrimarioOperationCompleted
            End If
            Me.InvokeAsync("cancelaCFDISectorPrimario", New Object() {usuarioSIFEI, passUser, rfc, UUIDS}, Me.cancelaCFDISectorPrimarioOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelaCFDISectorPrimarioOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelaCFDISectorPrimarioCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelaCFDISectorPrimarioCompleted(Me, New cancelaCFDISectorPrimarioCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getXMLProceso(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal rfc As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pass As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal idseguimiento As Long) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getXMLProceso", New Object() {rfc, pass, idseguimiento})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getXMLProcesoAsync(ByVal rfc As String, ByVal pass As String, ByVal idseguimiento As Long)
            Me.getXMLProcesoAsync(rfc, pass, idseguimiento, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getXMLProcesoAsync(ByVal rfc As String, ByVal pass As String, ByVal idseguimiento As Long, ByVal userState As Object)
            If (Me.getXMLProcesoOperationCompleted Is Nothing) Then
                Me.getXMLProcesoOperationCompleted = AddressOf Me.OngetXMLProcesoOperationCompleted
            End If
            Me.InvokeAsync("getXMLProceso", New Object() {rfc, pass, idseguimiento}, Me.getXMLProcesoOperationCompleted, userState)
        End Sub
        
        Private Sub OngetXMLProcesoOperationCompleted(ByVal arg As Object)
            If (Not (Me.getXMLProcesoCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getXMLProcesoCompleted(Me, New getXMLProcesoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDIAndURL(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getCFDIAndURL", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDIAndURLAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.getCFDIAndURLAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDIAndURLAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.getCFDIAndURLOperationCompleted Is Nothing) Then
                Me.getCFDIAndURLOperationCompleted = AddressOf Me.OngetCFDIAndURLOperationCompleted
            End If
            Me.InvokeAsync("getCFDIAndURL", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.getCFDIAndURLOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDIAndURLOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDIAndURLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDIAndURLCompleted(Me, New getCFDIAndURLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function CambiaPassword(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal NewPassword As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> Boolean
            Dim results() As Object = Me.Invoke("CambiaPassword", New Object() {Usuario, Password, NewPassword})
            Return CType(results(0),Boolean)
        End Function
        
        '''<remarks/>
        Public Overloads Sub CambiaPasswordAsync(ByVal Usuario As String, ByVal Password As String, ByVal NewPassword As String)
            Me.CambiaPasswordAsync(Usuario, Password, NewPassword, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub CambiaPasswordAsync(ByVal Usuario As String, ByVal Password As String, ByVal NewPassword As String, ByVal userState As Object)
            If (Me.CambiaPasswordOperationCompleted Is Nothing) Then
                Me.CambiaPasswordOperationCompleted = AddressOf Me.OnCambiaPasswordOperationCompleted
            End If
            Me.InvokeAsync("CambiaPassword", New Object() {Usuario, Password, NewPassword}, Me.CambiaPasswordOperationCompleted, userState)
        End Sub
        
        Private Sub OnCambiaPasswordOperationCompleted(ByVal arg As Object)
            If (Not (Me.CambiaPasswordCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent CambiaPasswordCompleted(Me, New CambiaPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> Byte()
            Dim results() As Object = Me.Invoke("getCFDI", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDIAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.getCFDIAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDIAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.getCFDIOperationCompleted Is Nothing) Then
                Me.getCFDIOperationCompleted = AddressOf Me.OngetCFDIOperationCompleted
            End If
            Me.InvokeAsync("getCFDI", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.getCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDICompleted(Me, New getCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDISendPDF(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> Byte()
            Dim results() As Object = Me.Invoke("getCFDISendPDF", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDISendPDFAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.getCFDISendPDFAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDISendPDFAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.getCFDISendPDFOperationCompleted Is Nothing) Then
                Me.getCFDISendPDFOperationCompleted = AddressOf Me.OngetCFDISendPDFOperationCompleted
            End If
            Me.InvokeAsync("getCFDISendPDF", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.getCFDISendPDFOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDISendPDFOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDISendPDFCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDISendPDFCompleted(Me, New getCFDISendPDFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDIProcesa(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, IsNullable:=true)> String()
            Dim results() As Object = Me.Invoke("getCFDIProcesa", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),String())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDIProcesaAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.getCFDIProcesaAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDIProcesaAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.getCFDIProcesaOperationCompleted Is Nothing) Then
                Me.getCFDIProcesaOperationCompleted = AddressOf Me.OngetCFDIProcesaOperationCompleted
            End If
            Me.InvokeAsync("getCFDIProcesa", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.getCFDIProcesaOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDIProcesaOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDIProcesaCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDIProcesaCompleted(Me, New getCFDIProcesaCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getCFDISign(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> Byte()
            Dim results() As Object = Me.Invoke("getCFDISign", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getCFDISignAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.getCFDISignAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getCFDISignAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.getCFDISignOperationCompleted Is Nothing) Then
                Me.getCFDISignOperationCompleted = AddressOf Me.OngetCFDISignOperationCompleted
            End If
            Me.InvokeAsync("getCFDISign", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.getCFDISignOperationCompleted, userState)
        End Sub
        
        Private Sub OngetCFDISignOperationCompleted(ByVal arg As Object)
            If (Not (Me.getCFDISignCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getCFDISignCompleted(Me, New getCFDISignCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function setCFDI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> Byte()
            Dim results() As Object = Me.Invoke("setCFDI", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub setCFDIAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.setCFDIAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub setCFDIAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.setCFDIOperationCompleted Is Nothing) Then
                Me.setCFDIOperationCompleted = AddressOf Me.OnsetCFDIOperationCompleted
            End If
            Me.InvokeAsync("setCFDI", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.setCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OnsetCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.setCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent setCFDICompleted(Me, New setCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getTimbreCFDI(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Usuario As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Password As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoXMLZip() As Byte, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal Serie As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal IdEquipo As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> Byte()
            Dim results() As Object = Me.Invoke("getTimbreCFDI", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo})
            Return CType(results(0),Byte())
        End Function
        
        '''<remarks/>
        Public Overloads Sub getTimbreCFDIAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String)
            Me.getTimbreCFDIAsync(Usuario, Password, archivoXMLZip, Serie, IdEquipo, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getTimbreCFDIAsync(ByVal Usuario As String, ByVal Password As String, ByVal archivoXMLZip() As Byte, ByVal Serie As String, ByVal IdEquipo As String, ByVal userState As Object)
            If (Me.getTimbreCFDIOperationCompleted Is Nothing) Then
                Me.getTimbreCFDIOperationCompleted = AddressOf Me.OngetTimbreCFDIOperationCompleted
            End If
            Me.InvokeAsync("getTimbreCFDI", New Object() {Usuario, Password, archivoXMLZip, Serie, IdEquipo}, Me.getTimbreCFDIOperationCompleted, userState)
        End Sub
        
        Private Sub OngetTimbreCFDIOperationCompleted(ByVal arg As Object)
            If (Not (Me.getTimbreCFDICompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getTimbreCFDICompleted(Me, New getTimbreCFDICompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function cancelaCFDISignature(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal usuarioSIFEI As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal passUser As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified, DataType:="base64Binary", IsNullable:=true)> ByVal archivoZIP() As Byte) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("cancelaCFDISignature", New Object() {usuarioSIFEI, passUser, archivoZIP})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDISignatureAsync(ByVal usuarioSIFEI As String, ByVal passUser As String, ByVal archivoZIP() As Byte)
            Me.cancelaCFDISignatureAsync(usuarioSIFEI, passUser, archivoZIP, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub cancelaCFDISignatureAsync(ByVal usuarioSIFEI As String, ByVal passUser As String, ByVal archivoZIP() As Byte, ByVal userState As Object)
            If (Me.cancelaCFDISignatureOperationCompleted Is Nothing) Then
                Me.cancelaCFDISignatureOperationCompleted = AddressOf Me.OncancelaCFDISignatureOperationCompleted
            End If
            Me.InvokeAsync("cancelaCFDISignature", New Object() {usuarioSIFEI, passUser, archivoZIP}, Me.cancelaCFDISignatureOperationCompleted, userState)
        End Sub
        
        Private Sub OncancelaCFDISignatureOperationCompleted(ByVal arg As Object)
            If (Not (Me.cancelaCFDISignatureCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent cancelaCFDISignatureCompleted(Me, New cancelaCFDISignatureCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        <System.Web.Services.Protocols.SoapDocumentMethodAttribute("", RequestNamespace:="http://MApeados/", ResponseNamespace:="http://MApeados/", Use:=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle:=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)>  _
        Public Function getXML(<System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal rfc As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal pass As String, <System.Xml.Serialization.XmlElementAttribute(Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> ByVal hash As String) As <System.Xml.Serialization.XmlElementAttribute("return", Form:=System.Xml.Schema.XmlSchemaForm.Unqualified)> String
            Dim results() As Object = Me.Invoke("getXML", New Object() {rfc, pass, hash})
            Return CType(results(0),String)
        End Function
        
        '''<remarks/>
        Public Overloads Sub getXMLAsync(ByVal rfc As String, ByVal pass As String, ByVal hash As String)
            Me.getXMLAsync(rfc, pass, hash, Nothing)
        End Sub
        
        '''<remarks/>
        Public Overloads Sub getXMLAsync(ByVal rfc As String, ByVal pass As String, ByVal hash As String, ByVal userState As Object)
            If (Me.getXMLOperationCompleted Is Nothing) Then
                Me.getXMLOperationCompleted = AddressOf Me.OngetXMLOperationCompleted
            End If
            Me.InvokeAsync("getXML", New Object() {rfc, pass, hash}, Me.getXMLOperationCompleted, userState)
        End Sub
        
        Private Sub OngetXMLOperationCompleted(ByVal arg As Object)
            If (Not (Me.getXMLCompletedEvent) Is Nothing) Then
                Dim invokeArgs As System.Web.Services.Protocols.InvokeCompletedEventArgs = CType(arg,System.Web.Services.Protocols.InvokeCompletedEventArgs)
                RaiseEvent getXMLCompleted(Me, New getXMLCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState))
            End If
        End Sub
        
        '''<remarks/>
        Public Shadows Sub CancelAsync(ByVal userState As Object)
            MyBase.CancelAsync(userState)
        End Sub
        
        Private Function IsLocalFileSystemWebService(ByVal url As String) As Boolean
            If ((url Is Nothing)  _
                        OrElse (url Is String.Empty)) Then
                Return false
            End If
            Dim wsUri As System.Uri = New System.Uri(url)
            If ((wsUri.Port >= 1024)  _
                        AndAlso (String.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) = 0)) Then
                Return true
            End If
            Return false
        End Function
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub cancelaCFDICompletedEventHandler(ByVal sender As Object, ByVal e As cancelaCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelaCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub cancelaCFDISectorPrimarioCompletedEventHandler(ByVal sender As Object, ByVal e As cancelaCFDISectorPrimarioCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelaCFDISectorPrimarioCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getXMLProcesoCompletedEventHandler(ByVal sender As Object, ByVal e As getXMLProcesoCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getXMLProcesoCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCFDIAndURLCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDIAndURLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDIAndURLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub CambiaPasswordCompletedEventHandler(ByVal sender As Object, ByVal e As CambiaPasswordCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class CambiaPasswordCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Boolean
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Boolean)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCFDICompletedEventHandler(ByVal sender As Object, ByVal e As getCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCFDISendPDFCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDISendPDFCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDISendPDFCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCFDIProcesaCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDIProcesaCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDIProcesaCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getCFDISignCompletedEventHandler(ByVal sender As Object, ByVal e As getCFDISignCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getCFDISignCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub setCFDICompletedEventHandler(ByVal sender As Object, ByVal e As setCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class setCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getTimbreCFDICompletedEventHandler(ByVal sender As Object, ByVal e As getTimbreCFDICompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getTimbreCFDICompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As Byte()
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),Byte())
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub cancelaCFDISignatureCompletedEventHandler(ByVal sender As Object, ByVal e As cancelaCFDISignatureCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class cancelaCFDISignatureCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0")>  _
    Public Delegate Sub getXMLCompletedEventHandler(ByVal sender As Object, ByVal e As getXMLCompletedEventArgs)
    
    '''<remarks/>
    <System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.4084.0"),  _
     System.Diagnostics.DebuggerStepThroughAttribute(),  _
     System.ComponentModel.DesignerCategoryAttribute("code")>  _
    Partial Public Class getXMLCompletedEventArgs
        Inherits System.ComponentModel.AsyncCompletedEventArgs
        
        Private results() As Object
        
        Friend Sub New(ByVal results() As Object, ByVal exception As System.Exception, ByVal cancelled As Boolean, ByVal userState As Object)
            MyBase.New(exception, cancelled, userState)
            Me.results = results
        End Sub
        
        '''<remarks/>
        Public ReadOnly Property Result() As String
            Get
                Me.RaiseExceptionIfNecessary
                Return CType(Me.results(0),String)
            End Get
        End Property
    End Class
End Namespace
